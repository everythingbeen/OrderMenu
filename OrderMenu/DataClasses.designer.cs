#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.34003
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace OrderMenu
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="OrderDB")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertDesk(Desk instance);
    partial void UpdateDesk(Desk instance);
    partial void DeleteDesk(Desk instance);
    partial void InsertWorkerMenu(WorkerMenu instance);
    partial void UpdateWorkerMenu(WorkerMenu instance);
    partial void DeleteWorkerMenu(WorkerMenu instance);
    partial void InsertDeskMenu(DeskMenu instance);
    partial void UpdateDeskMenu(DeskMenu instance);
    partial void DeleteDeskMenu(DeskMenu instance);
    partial void InsertMenu(Menu instance);
    partial void UpdateMenu(Menu instance);
    partial void DeleteMenu(Menu instance);
    partial void InsertOrderDesk(OrderDesk instance);
    partial void UpdateOrderDesk(OrderDesk instance);
    partial void DeleteOrderDesk(OrderDesk instance);
    partial void InsertRoom(Room instance);
    partial void UpdateRoom(Room instance);
    partial void DeleteRoom(Room instance);
    partial void InsertWorker(Worker instance);
    partial void UpdateWorker(Worker instance);
    partial void DeleteWorker(Worker instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::OrderMenu.Properties.Settings.Default.OrderDBConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Desk> Desk
		{
			get
			{
				return this.GetTable<Desk>();
			}
		}
		
		public System.Data.Linq.Table<WorkerMenu> WorkerMenu
		{
			get
			{
				return this.GetTable<WorkerMenu>();
			}
		}
		
		public System.Data.Linq.Table<DeskMenu> DeskMenu
		{
			get
			{
				return this.GetTable<DeskMenu>();
			}
		}
		
		public System.Data.Linq.Table<Menu> Menu
		{
			get
			{
				return this.GetTable<Menu>();
			}
		}
		
		public System.Data.Linq.Table<OrderDesk> OrderDesk
		{
			get
			{
				return this.GetTable<OrderDesk>();
			}
		}
		
		public System.Data.Linq.Table<Room> Room
		{
			get
			{
				return this.GetTable<Room>();
			}
		}
		
		public System.Data.Linq.Table<Worker> Worker
		{
			get
			{
				return this.GetTable<Worker>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Desk")]
	public partial class Desk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _RoomID;
		
		private System.Nullable<int> _Num;
		
		private System.Nullable<int> _WorkID;
		
		private EntitySet<DeskMenu> _DeskMenu;
		
		private EntitySet<OrderDesk> _OrderDesk;
		
		private EntityRef<Room> _Room;
		
		private EntityRef<Worker> _Worker;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnRoomIDChanging(System.Nullable<int> value);
    partial void OnRoomIDChanged();
    partial void OnNumChanging(System.Nullable<int> value);
    partial void OnNumChanged();
    partial void OnWorkIDChanging(System.Nullable<int> value);
    partial void OnWorkIDChanged();
    #endregion
		
		public Desk()
		{
			this._DeskMenu = new EntitySet<DeskMenu>(new Action<DeskMenu>(this.attach_DeskMenu), new Action<DeskMenu>(this.detach_DeskMenu));
			this._OrderDesk = new EntitySet<OrderDesk>(new Action<OrderDesk>(this.attach_OrderDesk), new Action<OrderDesk>(this.detach_OrderDesk));
			this._Room = default(EntityRef<Room>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoomID", DbType="Int")]
		public System.Nullable<int> RoomID
		{
			get
			{
				return this._RoomID;
			}
			set
			{
				if ((this._RoomID != value))
				{
					if (this._Room.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoomIDChanging(value);
					this.SendPropertyChanging();
					this._RoomID = value;
					this.SendPropertyChanged("RoomID");
					this.OnRoomIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Num", DbType="Int")]
		public System.Nullable<int> Num
		{
			get
			{
				return this._Num;
			}
			set
			{
				if ((this._Num != value))
				{
					this.OnNumChanging(value);
					this.SendPropertyChanging();
					this._Num = value;
					this.SendPropertyChanged("Num");
					this.OnNumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkID", DbType="Int")]
		public System.Nullable<int> WorkID
		{
			get
			{
				return this._WorkID;
			}
			set
			{
				if ((this._WorkID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkIDChanging(value);
					this.SendPropertyChanging();
					this._WorkID = value;
					this.SendPropertyChanged("WorkID");
					this.OnWorkIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Desk_DeskMenu", Storage="_DeskMenu", ThisKey="ID", OtherKey="DeskID")]
		public EntitySet<DeskMenu> DeskMenu
		{
			get
			{
				return this._DeskMenu;
			}
			set
			{
				this._DeskMenu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Desk_OrderDesk", Storage="_OrderDesk", ThisKey="ID", OtherKey="DeskID")]
		public EntitySet<OrderDesk> OrderDesk
		{
			get
			{
				return this._OrderDesk;
			}
			set
			{
				this._OrderDesk.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Desk", Storage="_Room", ThisKey="RoomID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Room Room
		{
			get
			{
				return this._Room.Entity;
			}
			set
			{
				Room previousValue = this._Room.Entity;
				if (((previousValue != value) 
							|| (this._Room.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Room.Entity = null;
						previousValue.Desk.Remove(this);
					}
					this._Room.Entity = value;
					if ((value != null))
					{
						value.Desk.Add(this);
						this._RoomID = value.ID;
					}
					else
					{
						this._RoomID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Room");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Desk", Storage="_Worker", ThisKey="WorkID", OtherKey="ID", IsForeignKey=true, DeleteRule="SET NULL")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.Desk.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.Desk.Add(this);
						this._WorkID = value.ID;
					}
					else
					{
						this._WorkID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Desk = this;
		}
		
		private void detach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Desk = null;
		}
		
		private void attach_OrderDesk(OrderDesk entity)
		{
			this.SendPropertyChanging();
			entity.Desk = this;
		}
		
		private void detach_OrderDesk(OrderDesk entity)
		{
			this.SendPropertyChanging();
			entity.Desk = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.WorkerMenu")]
	public partial class WorkerMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _WorkerID;
		
		private System.Nullable<int> _MenuID;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Worker> _Worker;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnWorkerIDChanging(System.Nullable<int> value);
    partial void OnWorkerIDChanged();
    partial void OnMenuIDChanging(System.Nullable<int> value);
    partial void OnMenuIDChanged();
    #endregion
		
		public WorkerMenu()
		{
			this._Menu = default(EntityRef<Menu>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_WorkerID", DbType="Int")]
		public System.Nullable<int> WorkerID
		{
			get
			{
				return this._WorkerID;
			}
			set
			{
				if ((this._WorkerID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnWorkerIDChanging(value);
					this.SendPropertyChanging();
					this._WorkerID = value;
					this.SendPropertyChanged("WorkerID");
					this.OnWorkerIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int")]
		public System.Nullable<int> MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_WorkerMenu", Storage="_Menu", ThisKey="MenuID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.WorkerMenu.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.WorkerMenu.Add(this);
						this._MenuID = value.ID;
					}
					else
					{
						this._MenuID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_WorkerMenu", Storage="_Worker", ThisKey="WorkerID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.WorkerMenu.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.WorkerMenu.Add(this);
						this._WorkerID = value.ID;
					}
					else
					{
						this._WorkerID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.DeskMenu")]
	public partial class DeskMenu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DeskID;
		
		private System.Nullable<int> _MenuID;
		
		private string _Status;
		
		private System.Nullable<int> _CookID;
		
		private string _CookStatus;
		
		private EntityRef<Desk> _Desk;
		
		private EntityRef<Menu> _Menu;
		
		private EntityRef<Worker> _Worker;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDeskIDChanging(System.Nullable<int> value);
    partial void OnDeskIDChanged();
    partial void OnMenuIDChanging(System.Nullable<int> value);
    partial void OnMenuIDChanged();
    partial void OnStatusChanging(string value);
    partial void OnStatusChanged();
    partial void OnCookIDChanging(System.Nullable<int> value);
    partial void OnCookIDChanged();
    partial void OnCookStatusChanging(string value);
    partial void OnCookStatusChanged();
    #endregion
		
		public DeskMenu()
		{
			this._Desk = default(EntityRef<Desk>);
			this._Menu = default(EntityRef<Menu>);
			this._Worker = default(EntityRef<Worker>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskID", DbType="Int")]
		public System.Nullable<int> DeskID
		{
			get
			{
				return this._DeskID;
			}
			set
			{
				if ((this._DeskID != value))
				{
					if (this._Desk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeskIDChanging(value);
					this.SendPropertyChanging();
					this._DeskID = value;
					this.SendPropertyChanged("DeskID");
					this.OnDeskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MenuID", DbType="Int")]
		public System.Nullable<int> MenuID
		{
			get
			{
				return this._MenuID;
			}
			set
			{
				if ((this._MenuID != value))
				{
					if (this._Menu.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMenuIDChanging(value);
					this.SendPropertyChanging();
					this._MenuID = value;
					this.SendPropertyChanged("MenuID");
					this.OnMenuIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="NVarChar(50)")]
		public string Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CookID", DbType="Int")]
		public System.Nullable<int> CookID
		{
			get
			{
				return this._CookID;
			}
			set
			{
				if ((this._CookID != value))
				{
					if (this._Worker.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCookIDChanging(value);
					this.SendPropertyChanging();
					this._CookID = value;
					this.SendPropertyChanged("CookID");
					this.OnCookIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CookStatus", DbType="NVarChar(50)")]
		public string CookStatus
		{
			get
			{
				return this._CookStatus;
			}
			set
			{
				if ((this._CookStatus != value))
				{
					this.OnCookStatusChanging(value);
					this.SendPropertyChanging();
					this._CookStatus = value;
					this.SendPropertyChanged("CookStatus");
					this.OnCookStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Desk_DeskMenu", Storage="_Desk", ThisKey="DeskID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Desk Desk
		{
			get
			{
				return this._Desk.Entity;
			}
			set
			{
				Desk previousValue = this._Desk.Entity;
				if (((previousValue != value) 
							|| (this._Desk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Desk.Entity = null;
						previousValue.DeskMenu.Remove(this);
					}
					this._Desk.Entity = value;
					if ((value != null))
					{
						value.DeskMenu.Add(this);
						this._DeskID = value.ID;
					}
					else
					{
						this._DeskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Desk");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_DeskMenu", Storage="_Menu", ThisKey="MenuID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Menu Menu
		{
			get
			{
				return this._Menu.Entity;
			}
			set
			{
				Menu previousValue = this._Menu.Entity;
				if (((previousValue != value) 
							|| (this._Menu.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Menu.Entity = null;
						previousValue.DeskMenu.Remove(this);
					}
					this._Menu.Entity = value;
					if ((value != null))
					{
						value.DeskMenu.Add(this);
						this._MenuID = value.ID;
					}
					else
					{
						this._MenuID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Menu");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_DeskMenu", Storage="_Worker", ThisKey="CookID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Worker Worker
		{
			get
			{
				return this._Worker.Entity;
			}
			set
			{
				Worker previousValue = this._Worker.Entity;
				if (((previousValue != value) 
							|| (this._Worker.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Worker.Entity = null;
						previousValue.DeskMenu.Remove(this);
					}
					this._Worker.Entity = value;
					if ((value != null))
					{
						value.DeskMenu.Add(this);
						this._CookID = value.ID;
					}
					else
					{
						this._CookID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Worker");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Menu")]
	public partial class Menu : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private System.Nullable<double> _Price;
		
		private string _Style;
		
		private EntitySet<WorkerMenu> _WorkerMenu;
		
		private EntitySet<DeskMenu> _DeskMenu;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnPriceChanging(System.Nullable<double> value);
    partial void OnPriceChanged();
    partial void OnStyleChanging(string value);
    partial void OnStyleChanged();
    #endregion
		
		public Menu()
		{
			this._WorkerMenu = new EntitySet<WorkerMenu>(new Action<WorkerMenu>(this.attach_WorkerMenu), new Action<WorkerMenu>(this.detach_WorkerMenu));
			this._DeskMenu = new EntitySet<DeskMenu>(new Action<DeskMenu>(this.attach_DeskMenu), new Action<DeskMenu>(this.detach_DeskMenu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Price", DbType="Float")]
		public System.Nullable<double> Price
		{
			get
			{
				return this._Price;
			}
			set
			{
				if ((this._Price != value))
				{
					this.OnPriceChanging(value);
					this.SendPropertyChanging();
					this._Price = value;
					this.SendPropertyChanged("Price");
					this.OnPriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Style", DbType="NVarChar(50)")]
		public string Style
		{
			get
			{
				return this._Style;
			}
			set
			{
				if ((this._Style != value))
				{
					this.OnStyleChanging(value);
					this.SendPropertyChanging();
					this._Style = value;
					this.SendPropertyChanged("Style");
					this.OnStyleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_WorkerMenu", Storage="_WorkerMenu", ThisKey="ID", OtherKey="MenuID")]
		public EntitySet<WorkerMenu> WorkerMenu
		{
			get
			{
				return this._WorkerMenu;
			}
			set
			{
				this._WorkerMenu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Menu_DeskMenu", Storage="_DeskMenu", ThisKey="ID", OtherKey="MenuID")]
		public EntitySet<DeskMenu> DeskMenu
		{
			get
			{
				return this._DeskMenu;
			}
			set
			{
				this._DeskMenu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_WorkerMenu(WorkerMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_WorkerMenu(WorkerMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
		
		private void attach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = this;
		}
		
		private void detach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Menu = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.OrderDesk")]
	public partial class OrderDesk : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private System.Nullable<int> _DeskID;
		
		private string _Time;
		
		private string _ClientName;
		
		private string _ClientPhone;
		
		private EntityRef<Desk> _Desk;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnDeskIDChanging(System.Nullable<int> value);
    partial void OnDeskIDChanged();
    partial void OnTimeChanging(string value);
    partial void OnTimeChanged();
    partial void OnClientNameChanging(string value);
    partial void OnClientNameChanged();
    partial void OnClientPhoneChanging(string value);
    partial void OnClientPhoneChanged();
    #endregion
		
		public OrderDesk()
		{
			this._Desk = default(EntityRef<Desk>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DeskID", DbType="Int")]
		public System.Nullable<int> DeskID
		{
			get
			{
				return this._DeskID;
			}
			set
			{
				if ((this._DeskID != value))
				{
					if (this._Desk.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnDeskIDChanging(value);
					this.SendPropertyChanging();
					this._DeskID = value;
					this.SendPropertyChanged("DeskID");
					this.OnDeskIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Time", DbType="NVarChar(50)")]
		public string Time
		{
			get
			{
				return this._Time;
			}
			set
			{
				if ((this._Time != value))
				{
					this.OnTimeChanging(value);
					this.SendPropertyChanging();
					this._Time = value;
					this.SendPropertyChanged("Time");
					this.OnTimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientName", DbType="NVarChar(50)")]
		public string ClientName
		{
			get
			{
				return this._ClientName;
			}
			set
			{
				if ((this._ClientName != value))
				{
					this.OnClientNameChanging(value);
					this.SendPropertyChanging();
					this._ClientName = value;
					this.SendPropertyChanged("ClientName");
					this.OnClientNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClientPhone", DbType="NVarChar(50)")]
		public string ClientPhone
		{
			get
			{
				return this._ClientPhone;
			}
			set
			{
				if ((this._ClientPhone != value))
				{
					this.OnClientPhoneChanging(value);
					this.SendPropertyChanging();
					this._ClientPhone = value;
					this.SendPropertyChanged("ClientPhone");
					this.OnClientPhoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Desk_OrderDesk", Storage="_Desk", ThisKey="DeskID", OtherKey="ID", IsForeignKey=true, DeleteRule="CASCADE")]
		public Desk Desk
		{
			get
			{
				return this._Desk.Entity;
			}
			set
			{
				Desk previousValue = this._Desk.Entity;
				if (((previousValue != value) 
							|| (this._Desk.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Desk.Entity = null;
						previousValue.OrderDesk.Remove(this);
					}
					this._Desk.Entity = value;
					if ((value != null))
					{
						value.OrderDesk.Add(this);
						this._DeskID = value.ID;
					}
					else
					{
						this._DeskID = default(Nullable<int>);
					}
					this.SendPropertyChanged("Desk");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Room")]
	public partial class Room : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Specification;
		
		private EntitySet<Desk> _Desk;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnSpecificationChanging(string value);
    partial void OnSpecificationChanged();
    #endregion
		
		public Room()
		{
			this._Desk = new EntitySet<Desk>(new Action<Desk>(this.attach_Desk), new Action<Desk>(this.detach_Desk));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Specification", DbType="NVarChar(50)")]
		public string Specification
		{
			get
			{
				return this._Specification;
			}
			set
			{
				if ((this._Specification != value))
				{
					this.OnSpecificationChanging(value);
					this.SendPropertyChanging();
					this._Specification = value;
					this.SendPropertyChanged("Specification");
					this.OnSpecificationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Room_Desk", Storage="_Desk", ThisKey="ID", OtherKey="RoomID")]
		public EntitySet<Desk> Desk
		{
			get
			{
				return this._Desk;
			}
			set
			{
				this._Desk.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Desk(Desk entity)
		{
			this.SendPropertyChanging();
			entity.Room = this;
		}
		
		private void detach_Desk(Desk entity)
		{
			this.SendPropertyChanging();
			entity.Room = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Worker")]
	public partial class Worker : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ID;
		
		private string _Name;
		
		private string _Profession;
		
		private string _Pwd;
		
		private EntitySet<Desk> _Desk;
		
		private EntitySet<WorkerMenu> _WorkerMenu;
		
		private EntitySet<DeskMenu> _DeskMenu;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIDChanging(int value);
    partial void OnIDChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnProfessionChanging(string value);
    partial void OnProfessionChanged();
    partial void OnPwdChanging(string value);
    partial void OnPwdChanged();
    #endregion
		
		public Worker()
		{
			this._Desk = new EntitySet<Desk>(new Action<Desk>(this.attach_Desk), new Action<Desk>(this.detach_Desk));
			this._WorkerMenu = new EntitySet<WorkerMenu>(new Action<WorkerMenu>(this.attach_WorkerMenu), new Action<WorkerMenu>(this.detach_WorkerMenu));
			this._DeskMenu = new EntitySet<DeskMenu>(new Action<DeskMenu>(this.attach_DeskMenu), new Action<DeskMenu>(this.detach_DeskMenu));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int ID
		{
			get
			{
				return this._ID;
			}
			set
			{
				if ((this._ID != value))
				{
					this.OnIDChanging(value);
					this.SendPropertyChanging();
					this._ID = value;
					this.SendPropertyChanged("ID");
					this.OnIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Profession", DbType="NVarChar(50)")]
		public string Profession
		{
			get
			{
				return this._Profession;
			}
			set
			{
				if ((this._Profession != value))
				{
					this.OnProfessionChanging(value);
					this.SendPropertyChanging();
					this._Profession = value;
					this.SendPropertyChanged("Profession");
					this.OnProfessionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwd", DbType="NVarChar(50)")]
		public string Pwd
		{
			get
			{
				return this._Pwd;
			}
			set
			{
				if ((this._Pwd != value))
				{
					this.OnPwdChanging(value);
					this.SendPropertyChanging();
					this._Pwd = value;
					this.SendPropertyChanged("Pwd");
					this.OnPwdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_Desk", Storage="_Desk", ThisKey="ID", OtherKey="WorkID")]
		public EntitySet<Desk> Desk
		{
			get
			{
				return this._Desk;
			}
			set
			{
				this._Desk.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_WorkerMenu", Storage="_WorkerMenu", ThisKey="ID", OtherKey="WorkerID")]
		public EntitySet<WorkerMenu> WorkerMenu
		{
			get
			{
				return this._WorkerMenu;
			}
			set
			{
				this._WorkerMenu.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Worker_DeskMenu", Storage="_DeskMenu", ThisKey="ID", OtherKey="CookID")]
		public EntitySet<DeskMenu> DeskMenu
		{
			get
			{
				return this._DeskMenu;
			}
			set
			{
				this._DeskMenu.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Desk(Desk entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_Desk(Desk entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_WorkerMenu(WorkerMenu entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_WorkerMenu(WorkerMenu entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
		
		private void attach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Worker = this;
		}
		
		private void detach_DeskMenu(DeskMenu entity)
		{
			this.SendPropertyChanging();
			entity.Worker = null;
		}
	}
}
#pragma warning restore 1591
